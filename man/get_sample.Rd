% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ff_importutils.R
\name{get_sample}
\alias{get_sample}
\title{Read an FCS File and Do Some Processing}
\usage{
get_sample(
  fn,
  compensate = TRUE,
  spill_matrix = NULL,
  transform = TRUE,
  transform.method = c("biexp", "asinh", "log"),
  a = 0.002,
  cofactor = 5,
  derail = TRUE,
  nice.names = TRUE,
  verbose = FALSE
)
}
\arguments{
\item{fn}{The fully qualified FCS filename}

\item{compensate}{Logical, apply compensation}

\item{spill_matrix}{Default NULL applies the SPILL matrix provided in the header
of the input file.  Provide a SPILL matrix of your own, if desired.  Be careful
that the column labels are consistent with the parameter labeling in the
corresponding input file.}

\item{transform}{Logical, apply linear transformation to scattering parameters
and biexponential transformation to fluorescence parameters.  If TRUE, transform.method
specifies which non-linear transformation and its associated adjustable parameter
(e.g. a, cofactor) is to be applied to non-scattering (e.g. fluorescence)
parameters, in which case.  See documentation for \code{doTransform} for further
details.}

\item{transform.method}{Non-linear method to be applied.  Default = biexp.}

\item{a}{The adjustable parameter for the biexp transformation (ignored unless
transform.method = biexp)}

\item{cofactor}{The adjustable parameter for the asinh transformation (ignored
unless transform.method = asinh)}

\item{derail}{Logical, get rid of events on the FSC-A and SSC-A positive axes}

\item{nice.names}{Logical, swap 'desc' for 'name' in the flowFrame}

\item{verbose}{Logical, report progress on the console}
}
\value{
A flowFrame, properly processed.
}
\description{
Read a FCS file using \code{\link[flowCore]{read.FCS}} and return a
flowFrame.  Along the way, optionally apply compensation, transformation,
removal of 'rail' events, and apply some parameter renaming for convenience
and nice pictures.
}
\details{
This function is a convenience wrapper to apply commonly used processing
steps as FCS data are read in.  It's often important that all files in a project
get processed identically.  Consolidating most of the steps in one function helps
us avoid mistakes.
}
